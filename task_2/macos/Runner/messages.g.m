// Autogenerated from Pigeon (v12.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "messages.g.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}
static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@interface PGNMessage ()
+ (PGNMessage *)fromList:(NSArray *)list;
+ (nullable PGNMessage *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@implementation PGNMessage
+ (instancetype)makeWithLength:(nullable NSNumber *)length
    inUpperCase:(nullable NSString *)inUpperCase
    inLowerCase:(nullable NSString *)inLowerCase
    initialText:(nullable NSString *)initialText {
  PGNMessage* pigeonResult = [[PGNMessage alloc] init];
  pigeonResult.length = length;
  pigeonResult.inUpperCase = inUpperCase;
  pigeonResult.inLowerCase = inLowerCase;
  pigeonResult.initialText = initialText;
  return pigeonResult;
}
+ (PGNMessage *)fromList:(NSArray *)list {
  PGNMessage *pigeonResult = [[PGNMessage alloc] init];
  pigeonResult.length = GetNullableObjectAtIndex(list, 0);
  pigeonResult.inUpperCase = GetNullableObjectAtIndex(list, 1);
  pigeonResult.inLowerCase = GetNullableObjectAtIndex(list, 2);
  pigeonResult.initialText = GetNullableObjectAtIndex(list, 3);
  return pigeonResult;
}
+ (nullable PGNMessage *)nullableFromList:(NSArray *)list {
  return (list) ? [PGNMessage fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.length ?: [NSNull null]),
    (self.inUpperCase ?: [NSNull null]),
    (self.inLowerCase ?: [NSNull null]),
    (self.initialText ?: [NSNull null]),
  ];
}
@end

@interface PGNMessageApiCodecReader : FlutterStandardReader
@end
@implementation PGNMessageApiCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128: 
      return [PGNMessage fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface PGNMessageApiCodecWriter : FlutterStandardWriter
@end
@implementation PGNMessageApiCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[PGNMessage class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface PGNMessageApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation PGNMessageApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[PGNMessageApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[PGNMessageApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *PGNMessageApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    PGNMessageApiCodecReaderWriter *readerWriter = [[PGNMessageApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void SetUpPGNMessageApi(id<FlutterBinaryMessenger> binaryMessenger, NSObject<PGNMessageApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.pigeon_example_package.MessageApi.getMessage"
        binaryMessenger:binaryMessenger
        codec:PGNMessageApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getMessageText:error:)], @"PGNMessageApi api (%@) doesn't respond to @selector(getMessageText:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_text = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        PGNMessage *output = [api getMessageText:arg_text error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
