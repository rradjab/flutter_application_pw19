// Autogenerated from Pigeon (v12.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#undef _HAS_EXCEPTIONS

#include "messages.g.h"

#include <flutter/basic_message_channel.h>
#include <flutter/binary_messenger.h>
#include <flutter/encodable_value.h>
#include <flutter/standard_message_codec.h>

#include <map>
#include <optional>
#include <string>

namespace pigeon_example {
using flutter::BasicMessageChannel;
using flutter::CustomEncodableValue;
using flutter::EncodableList;
using flutter::EncodableMap;
using flutter::EncodableValue;

// Message

Message::Message() {}

Message::Message(
  const int64_t* length,
  const std::string* in_upper_case,
  const std::string* in_lower_case,
  const std::string* initial_text)
 : length_(length ? std::optional<int64_t>(*length) : std::nullopt),
    in_upper_case_(in_upper_case ? std::optional<std::string>(*in_upper_case) : std::nullopt),
    in_lower_case_(in_lower_case ? std::optional<std::string>(*in_lower_case) : std::nullopt),
    initial_text_(initial_text ? std::optional<std::string>(*initial_text) : std::nullopt) {}

const int64_t* Message::length() const {
  return length_ ? &(*length_) : nullptr;
}

void Message::set_length(const int64_t* value_arg) {
  length_ = value_arg ? std::optional<int64_t>(*value_arg) : std::nullopt;
}

void Message::set_length(int64_t value_arg) {
  length_ = value_arg;
}


const std::string* Message::in_upper_case() const {
  return in_upper_case_ ? &(*in_upper_case_) : nullptr;
}

void Message::set_in_upper_case(const std::string_view* value_arg) {
  in_upper_case_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void Message::set_in_upper_case(std::string_view value_arg) {
  in_upper_case_ = value_arg;
}


const std::string* Message::in_lower_case() const {
  return in_lower_case_ ? &(*in_lower_case_) : nullptr;
}

void Message::set_in_lower_case(const std::string_view* value_arg) {
  in_lower_case_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void Message::set_in_lower_case(std::string_view value_arg) {
  in_lower_case_ = value_arg;
}


const std::string* Message::initial_text() const {
  return initial_text_ ? &(*initial_text_) : nullptr;
}

void Message::set_initial_text(const std::string_view* value_arg) {
  initial_text_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void Message::set_initial_text(std::string_view value_arg) {
  initial_text_ = value_arg;
}


EncodableList Message::ToEncodableList() const {
  EncodableList list;
  list.reserve(4);
  list.push_back(length_ ? EncodableValue(*length_) : EncodableValue());
  list.push_back(in_upper_case_ ? EncodableValue(*in_upper_case_) : EncodableValue());
  list.push_back(in_lower_case_ ? EncodableValue(*in_lower_case_) : EncodableValue());
  list.push_back(initial_text_ ? EncodableValue(*initial_text_) : EncodableValue());
  return list;
}

Message Message::FromEncodableList(const EncodableList& list) {
  Message decoded;
  auto& encodable_length = list[0];
  if (!encodable_length.IsNull()) {
    decoded.set_length(encodable_length.LongValue());
  }
  auto& encodable_in_upper_case = list[1];
  if (!encodable_in_upper_case.IsNull()) {
    decoded.set_in_upper_case(std::get<std::string>(encodable_in_upper_case));
  }
  auto& encodable_in_lower_case = list[2];
  if (!encodable_in_lower_case.IsNull()) {
    decoded.set_in_lower_case(std::get<std::string>(encodable_in_lower_case));
  }
  auto& encodable_initial_text = list[3];
  if (!encodable_initial_text.IsNull()) {
    decoded.set_initial_text(std::get<std::string>(encodable_initial_text));
  }
  return decoded;
}


MessageApiCodecSerializer::MessageApiCodecSerializer() {}

EncodableValue MessageApiCodecSerializer::ReadValueOfType(
  uint8_t type,
  flutter::ByteStreamReader* stream) const {
  switch (type) {
    case 128:
      return CustomEncodableValue(Message::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    default:
      return flutter::StandardCodecSerializer::ReadValueOfType(type, stream);
  }
}

void MessageApiCodecSerializer::WriteValue(
  const EncodableValue& value,
  flutter::ByteStreamWriter* stream) const {
  if (const CustomEncodableValue* custom_value = std::get_if<CustomEncodableValue>(&value)) {
    if (custom_value->type() == typeid(Message)) {
      stream->WriteByte(128);
      WriteValue(EncodableValue(std::any_cast<Message>(*custom_value).ToEncodableList()), stream);
      return;
    }
  }
  flutter::StandardCodecSerializer::WriteValue(value, stream);
}

/// The codec used by MessageApi.
const flutter::StandardMessageCodec& MessageApi::GetCodec() {
  return flutter::StandardMessageCodec::GetInstance(&MessageApiCodecSerializer::GetInstance());
}

// Sets up an instance of `MessageApi` to handle messages through the `binary_messenger`.
void MessageApi::SetUp(
  flutter::BinaryMessenger* binary_messenger,
  MessageApi* api) {
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.pigeon_example_package.MessageApi.getMessage", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_text_arg = args.at(0);
          if (encodable_text_arg.IsNull()) {
            reply(WrapError("text_arg unexpectedly null."));
            return;
          }
          const auto& text_arg = std::get<std::string>(encodable_text_arg);
          ErrorOr<Message> output = api->GetMessage(text_arg);
          if (output.has_error()) {
            reply(WrapError(output.error()));
            return;
          }
          EncodableList wrapped;
          wrapped.push_back(CustomEncodableValue(std::move(output).TakeValue()));
          reply(EncodableValue(std::move(wrapped)));
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
}

EncodableValue MessageApi::WrapError(std::string_view error_message) {
  return EncodableValue(EncodableList{
    EncodableValue(std::string(error_message)),
    EncodableValue("Error"),
    EncodableValue()
  });
}

EncodableValue MessageApi::WrapError(const FlutterError& error) {
  return EncodableValue(EncodableList{
    EncodableValue(error.code()),
    EncodableValue(error.message()),
    error.details()
  });
}

}  // namespace pigeon_example
